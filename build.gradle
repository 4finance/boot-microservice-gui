import org.joda.time.DateTime
import org.apache.tools.ant.filters.*

buildscript {
    ext {
        springBootVersion = "1.2.1.RELEASE"
    }
    repositories {
        mavenLocal()
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'com.ofg:uptodate-gradle-plugin:1.1.0'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.6'
        classpath 'joda-time:joda-time:2.4'

        if(project.hasProperty("coverage")) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'idea'
apply plugin: 'com.moowork.node'

ext {
    versionPrefix = "CD"
    buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "000"
    currentVersion = "${versionPrefix}-${buildNrLoc}"
    
    jacksonMapper = '1.9.13'
    microInfraSpringVersion = '0.8.1'
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "http://nexus.4finance.net/content/repositories/Pipeline") {
            authentication(userName: '', password: '')
        }
        pom {
            version = currentVersion
            artifactId = project.name
            groupId = 'com.ofg'
            project {
                parent {
                    groupId "org.springframework.boot"
                    artifactId "spring-boot-starter-parent"
                    version springBootVersion
                }
            }
        }
    }
}

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

processResources {
    String hashOlfLastCommitCmd = "git log --pretty=format:%H -n 1"
    def hashProc = hashOlfLastCommitCmd.execute()
    hashProc.waitFor()
    // Replace @placeholder@ in resource files with specific data
    filter ReplaceTokens, tokens: [
            "last-commit-hash": hashProc.in.text,
            "build-date-time": DateTime.now().toString("dd/MM/yyyy HH:mm:ss")
    ]
}

jar {
    dependsOn addHashFile
    from "commitHash.txt"

    from(fileTree("src/main/web/dist")) {
        into "static"
    }
}

project.gradle.projectsEvaluated {
    applicationDefaultJvmArgs = project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
}

//Workaround for the issue with Java 8u11 and 7u65 - http://www.infoq.com/news/2014/08/Java8-U11-Broke-Tools
test {
     jvmArgs '-noverify'
}

applicationDefaultJvmArgs << "-noverify"

repositories {
    mavenLocal()
    maven { url 'http://repository.codehaus.org' }
    maven { url 'http://repo.spring.io/milestone' }
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework:spring-context-support"
    compile "org.codehaus.groovy:groovy-all"
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapper"
    compile "org.codehaus.jackson:jackson-core-asl:$jacksonMapper"
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.tomcat.embed:tomcat-embed-el'
    compile 'com.jayway.jsonpath:json-path-assert:1.1.0'
    compile 'org.yaml:snakeyaml'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator'
    compile "org.aspectj:aspectjrt"
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'net.sf.ehcache:ehcache:2.9.0'
    // microservices
    compile ("com.ofg:micro-infra-spring-boot-starter:$microInfraSpringVersion") {
        exclude module: 'micro-infra-spring-config'
    }

    runtime "cglib:cglib-nodep:3.1"
    runtime "org.objenesis:objenesis:2.1" // allows mocking of classes without default constructor (together with CGLIB)
    runtime 'org.aspectj:aspectjweaver'

    testCompile 'junit:junit'
    testCompile 'com.jayway.awaitility:awaitility:1.6.3'
    testCompile 'org.hamcrest:hamcrest-library'
    testCompile "org.spockframework:spock-core"
    testRuntime "org.spockframework:spock-spring"
    testCompile "org.springframework:spring-test"
    testCompile('com.github.tomakehurst:wiremock:1.52') {
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
    }
    testCompile "com.ofg:micro-infra-spring-test:$microInfraSpringVersion"
}

if(project.hasProperty("coverage")) {
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'sonar-runner'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = "0.7.0.201403182114"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }
    
    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.21'
    }
    
    test {
        ignoreFailures = true
        jacoco {
            excludes = ['*Configuration']
        }
    }

    sonarRunner {
        sonarProperties {
            //TODO: fill this
            property "sonar.host.url", ""
            property "sonar.junit.reportsPath", "build/test-results"
        }
    }

}

def webDir = new File(projectDir, "src/main/web")

node {
    // Version of node to use.
    version = '0.10.29'

    // Enabled the automatic download. False is the default (for now).
    download = true

    workDir = webDir
}

task installAllNpm(type: NpmTask) {
    workingDir = webDir
    args = ['install']
}

task bower(type: NodeTask) {
    script = new File(webDir, 'node_modules/bower/bin/bower')
    workingDir = webDir
    args = ['--allow-root','install']
}

task grunt(type: NodeTask) {
    script = new File(webDir, 'node_modules/grunt-cli/bin/grunt')
    workingDir = webDir
}

task cleanGUIDeps << {
    ['bower_components', 'node_modules'].each {
        new File(webDir,it).deleteDir()
    }
}

clean << {
    new File(webDir, 'dist').deleteDir()
}

// run bower and grunt to build the web
bower.dependsOn installAllNpm
grunt.dependsOn bower
jar.dependsOn grunt

wrapper {
    gradleVersion '2.2.1'
}
